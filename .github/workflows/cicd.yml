name: CI/CD

env:
  # GCP project and region (set in GitHub environment variables)
  GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  GAR_LOCATION: ${{ vars.GCP_REGION }}
  GAR_REPOSITORY: "pairreader"
  GAR_BASE_IMAGE_NAME: "pairreader"
  CLOUDRUN_BASE_SERVICE_NAME: "pairreader-service"

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - 'main'

jobs:
  # Block external PRs from consuming any resources
  authorize:
    name: Authorize PR
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Authorized
        run: echo "PR authorized to run workflows"

  env-vars:
    name: Extract env vars
    runs-on: ubuntu-latest
    needs: authorize
    outputs:
      PAIRREADER_VERSION: ${{ steps.extract-versions.outputs.PAIRREADER_VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Extract pairreader version
        id: extract-versions
        run: |
          PAIRREADER_VERSION=$(grep -m 1 '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "PAIRREADER_VERSION = $PAIRREADER_VERSION"
          echo "PAIRREADER_VERSION=$PAIRREADER_VERSION" >> $GITHUB_OUTPUT

  pre-commit:
    name: Pre-commit
    needs: env-vars
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Set up Python
        run: uv python install

      - name: Install dependencies
        run: |
          uv sync --only-group pre-commit
          uv tree --only-group pre-commit

      - name: run pre-commit
        run: uv run --no-sync pre-commit run --all-files

  pytest:
    name: Unit tests
    needs:
      - env-vars
      - pre-commit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Set up Python
        run: uv python install

      - name: Install dependencies
        run: uv sync --group test

      - name: Run unit tests
        run: uv run pytest -m unit -v

  build-and-deploy-dev:
    name: Build and Deploy to Dev
    runs-on: ubuntu-latest
    needs: pytest
    environment: gcp-dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        run: |
          echo '${{ secrets.SA }}' > ${HOME}/gcp-key.json
          gcloud auth activate-service-account --key-file=${HOME}/gcp-key.json
          gcloud config set project ${{ env.GCP_PROJECT_ID }}
          rm ${HOME}/gcp-key.json

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG="${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.GAR_BASE_IMAGE_NAME }}-dev:${{ github.sha }}"
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.CLOUDRUN_BASE_SERVICE_NAME }}-dev \
            --image=${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ env.GAR_BASE_IMAGE_NAME }}-dev:${{ github.sha }} \
            --region=${{ env.GAR_LOCATION }} \
            --service-account=pairreader-runtime@soufianesys.iam.gserviceaccount.com \
            --allow-unauthenticated \
            --memory=4Gi \
            --port=8000 \
            --set-secrets=ANTHROPIC_API_KEY=ANTHROPIC_API_KEY:latest,CHAINLIT_AUTH_SECRET=CHAINLIT_AUTH_SECRET:latest,LANGSMITH_API_KEY=LANGSMITH_API_KEY:latest \
            --quiet
