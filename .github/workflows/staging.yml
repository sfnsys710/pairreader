name: Deploy to Staging

env:
  GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  GCP_REGION: ${{ vars.GCP_REGION }}
  GAR_REPOSITORY: "pairreader"
  GAR_BASE_IMAGE_NAME: "pairreader"
  CLOUDRUN_BASE_SERVICE_NAME: "pairreader-service"

on:
  workflow_dispatch:

# Prevent concurrent deployments to staging
concurrency:
  group: staging-deployment
  cancel-in-progress: false

jobs:
  extract-version:
    name: Extract versions
    runs-on: ubuntu-latest
    outputs:
      PAIRREADER_VERSION: ${{ steps.extract-versions.outputs.PAIRREADER_VERSION }}
      TF_VERSION: ${{ steps.extract-versions.outputs.TF_VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Extract versions
        id: extract-versions
        run: |
          PAIRREADER_VERSION=$(grep -m 1 '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          TF_VERSION=$(cat infra/.terraform-version)
          echo "PAIRREADER_VERSION = $PAIRREADER_VERSION"
          echo "TF_VERSION = $TF_VERSION"
          echo "PAIRREADER_VERSION=$PAIRREADER_VERSION" >> $GITHUB_OUTPUT
          echo "TF_VERSION=$TF_VERSION" >> $GITHUB_OUTPUT

  terraform-plan-staging:
    name: Terraform plan (staging)
    runs-on: ubuntu-latest
    needs: extract-version
    environment: gcp
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ needs.extract-version.outputs.TF_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: infra/envs/staging
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.SA }}

      - name: Terraform Plan
        run: terraform plan -var="project_id=${{ env.GCP_PROJECT_ID }}" -var="region=${{ env.GCP_REGION }}"
        working-directory: infra/envs/staging
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.SA }}

  terraform-apply-staging:
    name: Terraform apply (staging)
    runs-on: ubuntu-latest
    needs:
      - extract-version
      - terraform-plan-staging
    environment: gcp
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ needs.extract-version.outputs.TF_VERSION }}

      - name: Terraform Init
        run: terraform init
        working-directory: infra/envs/staging
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.SA }}

      - name: Terraform Apply
        run: terraform apply -auto-approve -var="project_id=${{ env.GCP_PROJECT_ID }}" -var="region=${{ env.GCP_REGION }}"
        working-directory: infra/envs/staging
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.SA }}

  docker-build-staging:
    name: Build and push Docker (staging)
    runs-on: ubuntu-latest
    needs:
      - extract-version
      - terraform-apply-staging
    environment: gcp
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Authenticate to Google Cloud
        run: |
          echo '${{ secrets.SA }}' > ${HOME}/gcp-key.json
          gcloud auth activate-service-account --key-file=${HOME}/gcp-key.json
          gcloud config set project ${{ env.GCP_PROJECT_ID }}
          rm ${HOME}/gcp-key.json

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev

      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}-staging/${{ env.GAR_BASE_IMAGE_NAME }}-staging:v${{ needs.extract-version.outputs.PAIRREADER_VERSION }}"
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG

  deploy-staging:
    name: Deploy to Cloud Run (staging)
    runs-on: ubuntu-latest
    needs:
      - extract-version
      - docker-build-staging
    environment: gcp
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Authenticate to Google Cloud
        run: |
          echo '${{ secrets.SA }}' > ${HOME}/gcp-key.json
          gcloud auth activate-service-account --key-file=${HOME}/gcp-key.json
          gcloud config set project ${{ env.GCP_PROJECT_ID }}
          rm ${HOME}/gcp-key.json

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.CLOUDRUN_BASE_SERVICE_NAME }}-staging \
            --image=${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}-staging/${{ env.GAR_BASE_IMAGE_NAME }}-staging:v${{ needs.extract-version.outputs.PAIRREADER_VERSION }} \
            --region=${{ env.GCP_REGION }} \
            --service-account=pairreader-runtime-staging@${{ env.GCP_PROJECT_ID }}.iam.gserviceaccount.com \
            --allow-unauthenticated \
            --memory=4Gi \
            --port=8000 \
            --set-secrets=ANTHROPIC_API_KEY=ANTHROPIC_API_KEY:latest,CHAINLIT_AUTH_SECRET=CHAINLIT_AUTH_SECRET:latest,LANGSMITH_API_KEY=LANGSMITH_API_KEY:latest \
            --quiet

      - name: Get Service URL
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.CLOUDRUN_BASE_SERVICE_NAME }}-staging \
            --region=${{ env.GCP_REGION }} \
            --format='value(status.url)')
          echo "Staging service deployed at: $SERVICE_URL"
