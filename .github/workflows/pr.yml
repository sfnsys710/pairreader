name: PR Checks and Dev Deployment

env:
  GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
  GCP_REGION: ${{ vars.GCP_REGION }}
  GAR_REPOSITORY: "pairreader"
  GAR_BASE_IMAGE_NAME: "pairreader"
  CLOUDRUN_BASE_SERVICE_NAME: "pairreader-service"

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - 'main'

# Prevent concurrent runs on the same PR
concurrency:
  group: pr-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # Block external PRs from consuming any resources
  authorize:
    name: Authorize PR
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    steps:
      - name: Authorized
        run: echo "PR authorized to run workflows"

  extract-version:
    name: Extract versions
    runs-on: ubuntu-latest
    needs: authorize
    outputs:
      PAIRREADER_VERSION: ${{ steps.extract-versions.outputs.PAIRREADER_VERSION }}
      TF_VERSION: ${{ steps.extract-versions.outputs.TF_VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Extract versions
        id: extract-versions
        run: |
          PAIRREADER_VERSION=$(grep -m 1 '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          TF_VERSION=$(cat infra/.terraform-version)
          echo "PAIRREADER_VERSION = $PAIRREADER_VERSION"
          echo "TF_VERSION = $TF_VERSION"
          echo "PAIRREADER_VERSION=$PAIRREADER_VERSION" >> $GITHUB_OUTPUT
          echo "TF_VERSION=$TF_VERSION" >> $GITHUB_OUTPUT

  pre-commit:
    name: Pre-commit
    needs: extract-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Set up Python
        run: uv python install

      - name: Install dependencies
        run: |
          uv sync --only-group pre-commit
          uv tree --only-group pre-commit

      - name: run pre-commit
        run: uv run --no-sync pre-commit run --all-files

  terraform-checks:
    name: Terraform checks
    needs: extract-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ needs.extract-version.outputs.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: infra

      - name: Terraform Init (dev)
        run: terraform init -backend=false
        working-directory: infra/envs/dev

      - name: Terraform Validate (dev)
        run: terraform validate
        working-directory: infra/envs/dev

      - name: Terraform Init (staging)
        run: terraform init -backend=false
        working-directory: infra/envs/staging

      - name: Terraform Validate (staging)
        run: terraform validate
        working-directory: infra/envs/staging

      - name: Terraform Init (prod)
        run: terraform init -backend=false
        working-directory: infra/envs/prod

      - name: Terraform Validate (prod)
        run: terraform validate
        working-directory: infra/envs/prod

  pytest:
    name: Unit tests
    needs:
      - extract-version
      - pre-commit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Set up Python
        run: uv python install

      - name: Install dependencies
        run: uv sync --group test

      - name: Run unit tests
        run: uv run pytest -m unit -v

  terraform-dev:
    name: Terraform (dev)
    needs:
      - extract-version
      - terraform-checks
      - pre-commit
      - pytest
    uses: ./.github/workflows/terraform-workflow.yml
    with:
      environment: dev
      terraform_version: ${{ needs.extract-version.outputs.TF_VERSION }}
      project_id: ${{ vars.GCP_PROJECT_ID }}
      region: ${{ vars.GCP_REGION }}
    secrets:
      SA: ${{ secrets.SA }}

  check-code-changes-dev:
    name: Check for code changes (dev)
    runs-on: ubuntu-latest
    needs: terraform-dev
    outputs:
      code_changed: ${{ steps.changed-files.outputs.any_changed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Need full history to detect changes

      - name: Check for code changes
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            src/**
            pyproject.toml
            uv.lock
            Dockerfile
            .dockerignore
            chainlit.md
            public/**

  docker-build-dev:
    name: Build and push Docker (dev)
    needs: check-code-changes-dev
    if: needs.check-code-changes-dev.outputs.code_changed == 'true'
    uses: ./.github/workflows/docker-build.yml
    with:
      environment: dev
      image_tag: ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/pairreader-dev/pairreader-dev:${{ github.sha }}
      project_id: ${{ vars.GCP_PROJECT_ID }}
      region: ${{ vars.GCP_REGION }}
    secrets:
      SA: ${{ secrets.SA }}

  deploy-dev:
    name: Deploy to Cloud Run (dev)
    needs: docker-build-dev
    uses: ./.github/workflows/deploy-cloudrun.yml
    with:
      environment: dev
      image_tag: ${{ vars.GCP_REGION }}-docker.pkg.dev/${{ vars.GCP_PROJECT_ID }}/pairreader-dev/pairreader-dev:${{ github.sha }}
      project_id: ${{ vars.GCP_PROJECT_ID }}
      region: ${{ vars.GCP_REGION }}
      service_name: pairreader-service-dev
      allow_unauthenticated: true
    secrets:
      SA: ${{ secrets.SA }}
