name: CI - Main Branch

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allows manual trigger for Docker build/push

jobs:
  extract-variables:
    name: Extract Project Variables
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.vars.outputs.version }}
      python_version: ${{ steps.vars.outputs.python_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract variables from pyproject.toml
        id: vars
        run: |
          VERSION=$(grep -m 1 '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          PYTHON_VERSION=$(grep -m 1 '^requires-python = ' pyproject.toml | sed 's/requires-python = ">=\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "python_version=$PYTHON_VERSION" >> $GITHUB_OUTPUT
          echo "Extracted variables:"
          echo "  Version: $VERSION"
          echo "  Python Version: $PYTHON_VERSION"

  pre-commit-checks:
    name: Pre-commit Checks
    runs-on: ubuntu-latest
    needs: extract-variables
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.extract-variables.outputs.python_version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --group dev

      - name: Run pre-commit hooks
        run: uv run pre-commit run --all-files

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [extract-variables, pre-commit-checks]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.extract-variables.outputs.python_version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --group test

      - name: Run unit tests
        run: uv run pytest -m unit -v

  docker-build-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [extract-variables, pre-commit-checks, unit-tests]
    if: github.event_name == 'workflow_dispatch'  # Only run on manual trigger
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}/pairreader:${{ needs.extract-variables.outputs.version }}
            ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}/pairreader:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Image Details
        run: |
          echo "Image pushed to:"
          echo "  ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}/pairreader:${{ needs.extract-variables.outputs.version }}"
          echo "  ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }}/pairreader:latest"
